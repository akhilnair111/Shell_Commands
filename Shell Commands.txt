1. To find out where you are in the filesystem, run the command pwd (short for "print working directory"). This prints the absolute path of your current working directory ------ pwd

2. ls lists the contents of your current directory (the one displayed by pwd). If you add the names of some files, ls will list them, and if you add the names of directories, it will list their contents. ------ ls

3. You are in /home/repl. Use ls with a relative path to list the file that has an absolute path of /home/repl/course.txt 
------ ls course.txt

4. You are in /home/repl. Use ls with a relative path to list the file /home/repl/seasonal/summer.csv (Relative paths do not start with a leading '/'.). 
------ ls seasonal/summer.csv

COPY

5.------ cp original.txt duplicate.txt
creates a copy of original.txt called duplicate.txt. If there already was a file called duplicate.txt, it is overwritten. If the last parameter to cp is an existing directory, then a command like:

------ cp seasonal/autumn.csv seasonal/winter.csv backup
copies all of the files into that directory.

6. Make a copy of seasonal/summer.csv in the backup directory (which is also in /home/repl), calling the new file summer.bck
------ cp seasonal/summer.csv backup/summer.bck

7. Copy spring.csv and summer.csv from the seasonal directory into the backup directory without changing your current working directory (/home/repl).
------ cp seasonal/spring.csv seasonal/summer.csv backup

MOVE

8. You are in /home/repl, which has sub-directories seasonal and backup. Using a single command, move spring.csv and summer.csv from seasonal to backup
------ mv seasonal/spring.csv seasonal/summer.csv backup

RENAME

9. mv can also be used to rename files. If you run:

------ mv course.txt old-course.txt
then the file course.txt in the current working directory is "moved" to the file old-course.txt. This is different from the way file browsers work, but is often handy.

One warning: just like cp, mv will overwrite existing files. If, for example, you already have a file called old-course.txt, then the command shown above will replace it with whatever is in course.txt
------ mv winter.csv winter.csv.bck
OUTPUT [autumn.csv  spring.csv  summer.csv  winter.csv.bck]

DELETE

10. ------ rm thesis.txt backup/thesis-2017-08.txt
removes both thesis.txt and backup/thesis-2017-08.txt

11. create and delete directories
If you try to rm a directory, the shell prints an error message telling you it can't do that, primarily to stop you from accidentally deleting an entire directory full of work. Instead, you can use a separate command called rmdir. For added safety, it only works when the directory is empty, so you must delete the files in a directory before you delete the directory. (Experienced users can use the -r option to rm to get the same effect.
------ rm people/agarwal.txt
------ rmdir people
------ mkdir yearly
------ mkdir yearly/2017

12. Move /home/repl/people/agarwal.txt into /tmp/scratch. We suggest you use the ~ shortcut for your home directory and a relative path for the second rather than the absolute path.
------ mv ~/people/agarwal.txt scratch

13. view a file's contents
The simplest way to do this is with cat, which just prints the contents of files onto the screen. (Its name is short for "concatenate", meaning "to link things together", since it will print all the files whose names you give it, one after the other.)
------ cat course.txt

14. view a file's contents piece by piece
less the names of several files, you can type :n (colon and a lower-case 'n') to move to the next file, :p to go back to the previous one, or :q to quit.
------ less seasonal/spring.csv seasonal/summer.csv

15. look at the start of a file
------ head seasonal/summer.csv (default 10 lines)

head will only display the first three lines of the file. If you run head -n 100, it will display the first 100 (assuming there are that many), and so on.
A flag's name usually indicates its purpose (for example, -n is meant to signal "number of lines"). Command flags don't have to be a - followed by a single letter, but it's a widely-used convention.
------ head -n 5 seasonal/winter.csv

16. list everything below a directory
In order to see everything underneath a directory, no matter how deeply nested it is, you can give ls the flag -R (which means "recursive").
------ ls -R
ls has another flag -F that prints a / after the name of every directory and a * after the name of every runnable program. Run ls with the two flags, -R and -F, and the absolute path to your home directory to see everything it contains. 
------ ls -R -F ~

17. select columns from a file
------ cut -f 2-5,8 -d , values.csv
which means "select columns 2 through 5 and columns 8, using comma as the separator". cut uses -f (meaning "fields") to specify columns and -d (meaning "delimiter") to specify the separator. 

18. select lines containing specific values
grep takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. For example, ------ grep bicuspid seasonal/winter.csv prints lines from winter.csv that contain "bicuspid".
some of grep's more common flags:
	-c: print a count of matching lines rather than the lines themselves
	-h: do not print the names of files when searching multiple files
	-i: ignore case (e.g., treat "Regression" and "regression" as matches)
	-l: print the names of files that contain matches, not the matches
	-n: print line numbers for matching lines
	-v: invert the match, i.e., only show lines that don't match
------ grep molar seasonal/autum.csv
------ grep -v -n molar seasonal/spring.csv
------ grep -c incisor seasonal/autumn.csv seasonal/winter.csv

19. store a command's output in a file
------ tail -n 5 seasonal/winter.csv > last.csv
The greater-than sign > tells the shell to redirect tail's output to a file. It isn't part of the tail command; instead, it works with every shell command that produces output.

20. better way to combine commands
------ head -n 5 seasonal/summer.csv | tail -n 3
The pipe symbol tells the shell to use the output of the command on the left as the input to the command on the right.

QUES - Use cut to select all of the tooth names from column 2 of the comma delimited file seasonal/summer.csv, then pipe the result to grep, with an inverted match, to exclude the header line containing the word "Tooth". 

ANS : ------ cut -f 2 -d , seasonal/summer.csv | grep -v Tooth

21. count the records in a file
The command wc (short for "word count") prints the number of characters, words, and lines in a file. You can make it print only one of these using -c, -w, or -l respectively.

QUES - Count how many records in seasonal/spring.csv have dates in July 2017 (2017-07).

ANS: ------ grep 2017-07 seasonal/spring.csv | wc -l

22. specify many files at once
------ cut -d , -f 1 seasonal/winter.csv seasonal/spring.csv seasonal/summer.csv seasonal/autumn.csv
Instead use :
------ cut -d , -f 1 seasonal/*
or
------ cut -d , -f 1 seasonal/*.csv

QUES : Write a single command using head to get the first three lines from both seasonal/spring.csv and seasonal/summer.csv, a total of six lines of data, but not from the autumn or winter data files. Use a wildcard instead of spelling out the files' names in full.

ANS : ------ head -n 3 seasonal/s*.csv

23. other wildcards
The shell has other wildcards as well, though they are less commonly used:

? matches a single character, so 201?.txt will match 2017.txt or 2018.txt, but not 2017-01.txt.
[...] matches any one of the characters inside the square brackets, so 201[78].txt matches 2017.txt or 2018.txt, but not 2016.txt.
{...} matches any of the comma-separated patterns inside the curly brackets, so {*.txt, *.csv} matches any file whose name ends with .txt or .csv, but not files whose names end with .pdf.

24. sort lines of text
sort puts data in order. By default it does this in ascending alphabetical order, but the flags -n and -r can be used to sort numerically and reverse the order of its output, while -b tells it to ignore leading blanks and -f tells it to fold case (i.e., be case-insensitive). Pipelines often use grep to get rid of unwanted records and then sort to put the remaining records in order.
------ cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort -r

25. remove duplicate lines
Another command that is often used with sort is uniq, whose job is to remove duplicated lines. More specifically, it removes adjacent duplicated lines. If a file contains:

2017-07-03
2017-07-03
2017-08-03
2017-08-03
then uniq will produce:

2017-07-03
2017-08-03
but if it contains:

2017-07-03
2017-08-03
2017-07-03
2017-08-03
then uniq will print all four lines. The reason is that uniq is built to work with very large files. In order to remove non-adjacent lines from a file, it would have to keep the whole file in memory (or at least, all the unique lines seen so far). By only removing adjacent duplicates, it only has to keep the most recent unique line in memory.
------ cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c

26. Excercise:
QUES: find out how many records are in the shortest of the seasonal data files.
Use wc with appropriate parameters to list the number of lines in all of the seasonal data files. (Use a wildcard for the filenames instead of typing them all in by hand.)
------ wc -l seasonal/*.csv
Add another command to the previous one using a pipe to remove the line containing the word "total".
------ wc -l seasonal/*.csv | grep -v total
Add two more stages to the pipeline that use sort -n and head -n 1 to find the file containing the fewest lines.
------ wc -l seasonal/*.csv | grep -v total | sort -n | head -n 1

27. print a variable's value
print a variable's value like this:
------ echo USER
it will print the variable's name, USER.
To get the variable's value, you must put a dollar sign $ in front of it. Typing
------ echo $USER
prints
repl
This is true everywhere: to get the value of a variable called X, you must write $X. (This is so that the shell can tell whether you mean "a file named X" or "the value of a variable named X".)

28. How else does the shell store information
he other kind of variable is called a shell variable, which is like a local variable in a programming language.
To create a shell variable, you simply assign a value to a name:
------ training=seasonal/summer.csv
without any spaces before or after the = sign. Once you have done this, you can check the variable's value with:
------ echo $training
seasonal/summer.csv
------ head -n 1 $training

29. Shell variables are also used in loops, which repeat commands many times. If we run this command:
------ for filetype in gif jpg png; do echo $filetype; done
it produces:
gif
jpg
png

30. repeat a command once for each file
------ for filename in seasonal/*.csv; do echo $filename; done

31. People often set a variable using a wildcard expression to record a list of filenames. For example, if you define datasets like this:
------ datasets=seasonal/*.csv
you can display the files' names later using:
------ for filename in $datasets; do echo $filename; done

32. run many commands in a single loop
Printing filenames is useful for debugging, but the real purpose of loops is to do things with multiple files. This loop prints the second line of each data file:
------for file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done

33. Exercise:
Write a loop that prints the last entry from July 2017 (2017-07) in every seasonal file. It should produce a similar output to:

------grep 2017-07 seasonal/winter.csv | tail -n 1
but for each seasonal file separately. Please use file as the name of the loop variable, and remember to loop through the list of files seasonal/*.csv (instead of 'seasonal/winter.csv' as in the example).

ANS: ------ for file in seasonal/*.csv; do grep 2017-07 $file | tail -n 1; done



EDIT A FILE

34. Unix has a bewildering variety of text editors. For this course, we will use a simple one called Nano. If you type nano filename, it will open filename for editing (or create it if it doesn't already exist). You can move around with the arrow keys, delete characters using backspace, and do other operations with control-key combinations:

	Ctrl + K: delete a line.
	Ctrl + U: un-delete a line.
	Ctrl + O: save the file ('O' stands for 'output'). You will also need to press Enter to confirm the filename!
	Ctrl + X: exit the editor.

To save what you have written, type Ctrl + O to write the file out, then Enter to confirm the filename, then Ctrl + X to exit the editor.

35. Exercise
Use grep with the -h flag (to stop it from printing filenames) and -v Tooth (to select lines that don't match the header line) to select the data records from spring.csv and summer.csv in that order and redirect the output to temp.csv.
------ grep -h -v Tooth seasonal/spring.csv seasonal/summer.csv > temp.csv

36. save commands to re-run later
EXERCISE
Use nano dates.sh to create a file called dates.sh that contains this command:
------cut -d , -f 1 seasonal/*.csv
to extract the first column from all of the CSV files in seasonal.
ANS: after editing nano dates.sh run below command.	
------ bash dates.sh

37. Scripts can also contain pipes. For example, if all-dates.sh contains this line:
------ cut -d , -f 1 seasonal/*.csv | grep -v Date | sort | uniq
then:
------ bash all-dates.sh > dates.out
will extract the unique dates from the seasonal data files and save them in dates.out

38. pass filenames to scripts
A script that processes specific files is useful as a record of what you did, but one that allows you to process any files you want is more useful. To support this, you can use the special expression $@ (dollar sign immediately followed by at-sign) to mean "all of the command-line parameters given to the script".

For example, if unique-lines.sh contains sort $@ | uniq, when you run:

------ bash unique-lines.sh seasonal/summer.csv
the shell replaces $@ with seasonal/summer.csv and processes one file. If you run this:

------ bash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv
it processes two data files, and so on.

39. process a single argument
As well as $@, the shell lets you use $1, $2, and so on to refer to specific command-line parameters. You can use this to write commands that feel simpler or more natural than the shell's. For example, you can create a script called column.sh that selects a single column from a CSV file when the user provides the filename as the first parameter and the column as the second:
------ cut -d , -f $2 $1
and then run it using:
------ bash column.sh seasonal/autumn.csv 1
Notice how the script uses the two parameters in reverse order.

40. EXERCISE
QUESTION:
Use Nano to edit the script range.sh and replace the two ____ placeholders with $@ and -v so that it lists the names and number of lines in all of the files given on the command line without showing the total number of lines in all files.
 add sort -n and head -n 1 in that order to the pipeline in range.sh
 Again using Nano, add a second line to range.sh to print the name and record count of the longest file in the directory as well as the shortest. This line should be a duplicate of the one you have already written, but with sort -n -r rather than sort -n.

ANS: ------ wc -l $@ | grep -v total | sort -n | head -n 1
     ------ wc -l $@ | grep -v total | sort -n -r | head -n 1

41. write loops in a shell script
Shell scripts can also contain loops. You can write them using semi-colons, or split them across lines without semi-colons to make them more readable:

# Print the first and last data records of each file.
for filename in $@
do
    head -n 2 $filename | tail -n 1
    tail -n 1 $filename
done
(You don't have to indent the commands inside the loop, but doing so makes things clearer.)

